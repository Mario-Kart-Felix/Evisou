@using Evious.Web
@using Evious.Framework.Contract
@using Evious.Framework.Web.Controls
@using Evious.Ims.Contract
@using Evious.Ims.Contract.Model
@model Evious.Ims.Contract.Model.Supplier
<div class="modal-header">    
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    @{
        if(Model.ID == 0)
        {
        <h4 class="modal-title" id="ModalLabel">添加新供应商</h4>
        }
        else
        {
        <h4 class="modal-title" id="ModalLabel">编辑供应商:</h4>
        }
    }    
</div>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "mainForm" }))
{
   
    <div class="modal-body">       
        <div class="alert alert-danger display-hide">
            <button class="close" data-close="alert"></button>
            表单有错误,请检查
        </div>
        <div class="alert alert-success display-hide">
            <button class="close" data-close="alert"></button>
            验证成功
        </div>
        <div class="form-horizontal">            
            <div class="tabbable">
                <ul class="nav nav-tabs">
                    <li class="active">
                        <a href="#tab_general" data-toggle="tab">
                            基本信息
                        </a>
                    </li>
                    <li>
                        <a href="#tab_supplierproduct" data-toggle="tab">
                            供应的产品
                        </a>
                    </li>
                    
                </ul>
                <div class="tab-content no-space">
                    <div class="tab-pane active" id="tab_general">
                        <div class="form-body">
                            <div class="form-group">
                                <label class="col-md-3 control-label">
                                    产品供应商: <span class="required">
                                        *
                                    </span>
                                </label>
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-cubes"></i>
                                        </span>
                                        <div class="input-icon right">
                                            <i class="fa"></i>
                                            @Html.TextBoxFor(m => m.Name, new { @class = "form-control text-box single-line input-medium" })
                                        </div>
                                    </div>
                                    <span class="help-inline">@Html.ValidationMessageFor(m => m.Name)</span>                                   
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="col-md-3 control-label">
                                    SKU: <span class="required">
                                        *
                                    </span>
                                </label>
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-cubes"></i>
                                        </span>
                                        <div class="input-icon right">
                                            <i class="fa"></i>
                                            @Html.TextBoxFor(m => m.Platform, new { @class = "form-control text-box single-line input-medium" })
                                        </div>
                                    </div>
                                    <span class="help-inline">@Html.ValidationMessageFor(m => m.Platform)</span>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="col-md-3 control-label">
                                    网址: 
                                </label>
                                <div class="col-md-9">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-cubes"></i>
                                        </span>
                                        <div class="input-icon right">
                                            <i class="fa"></i>                                            
                                            @Html.TextBoxFor(m => m.URL, new { @class = "form-control text-box single-line input-medium", })                                            
                                        </div>
                                    </div>
                                    <span class="help-inline">@Html.ValidationMessageFor(m => m.URL)</span>   
                                    
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="col-md-3 control-label">
                                    客服: 
                                </label>
                                <div class="col-md-9">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-cubes"></i>
                                        </span>
                                        <div class="input-icon right">
                                            <i class="fa"></i>
                                            @Html.TextBoxFor(m => m.CS, new { @class = "form-control text-box single-line input-medium", })                           
                                        </div>
                                    </div>
                                    <span class="help-inline">@Html.ValidationMessageFor(m => m.CS)</span>   
                                    
                                    <span class="help-block">
                                        在产品列表显示
                                    </span>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="col-md-3 control-label">
                                    客服电话:
                                </label>
                                <div class="col-md-9">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-cubes"></i>
                                        </span>
                                        <div class="input-icon right">
                                            <i class="fa"></i>
                                            @Html.TextBoxFor(m => m.CSPhone, new { @class = "form-control text-box single-line input-medium", })
                                        </div>
                                    </div>
                                    <span class="help-inline">@Html.ValidationMessageFor(m => m.CSPhone)</span>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="col-md-3 control-label">
                                    联系人/经理:
                                </label>
                                <div class="col-md-9">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-cubes"></i>
                                        </span>
                                        <div class="input-icon right">
                                            <i class="fa"></i>
                                            @Html.TextBoxFor(m => m.Contact, new { @class = "form-control text-box single-line input-medium", })
                                        </div>
                                    </div>
                                    <span class="help-inline">@Html.ValidationMessageFor(m => m.Contact)</span>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="col-md-3 control-label">
                                    联系人电话/经理电话:
                                </label>
                                <div class="col-md-9">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-cubes"></i>
                                        </span>
                                        <div class="input-icon right">
                                            <i class="fa"></i>
                                            @Html.TextBoxFor(m => m.ContactPhone, new { @class = "form-control text-box single-line input-medium", })
                                        </div>
                                    </div>
                                    <span class="help-inline">@Html.ValidationMessageFor(m => m.ContactPhone)</span>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="col-md-3 control-label">
                                    地址:
                                </label>
                                <div class="col-md-9">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-cubes"></i>
                                        </span>
                                        <div class="input-icon right">
                                            <i class="fa"></i>
                                            @Html.TextAreaFor(m => m.Address, new { @class = "form-control input-medium", })
                                        </div>
                                    </div>
                                    <span class="help-inline">@Html.ValidationMessageFor(m => m.Address)</span>

                                </div>
                            </div>
                           
                                                        
                            
                        </div>
                    </div>
                    <div class="tab-pane" id="tab_supplierproduct">
                        <div class="form-body">     
                            <div class="form-group">    
                                <div class="col-md-12">
                                    @{
                                        var products = ViewBag.Products;
                                        foreach (Product product in products)
                                        {
                                            <div class="col-sm-12 col-md-6">
                                                <div class="thumbnail">
                                                    <a href="@Url.StaticFile()@product.CoverPicture" title="@product.Sku||@product.Name">
                                                        <img src="@Url.StaticFile()@product.CoverPicture" alt="@product.Sku||@product.Name" style="width: 100%; height: 150px;"
                                                             title="@product.Sku||@product.Name">
                                                    </a>
                                                    <div class="caption">
                                                        <h3>@product.Sku</h3>
                                                        <p>
                                                            @product.Name
                                                        </p>
                                                        <p>
                                                            <div class="form-group">
                                                                <label class="col-md-4 control-label">
                                                                    供应:
                                                                </label>
                                                                <div class="col-md-3">
                                                                    <input class="make-switch" data-on="success" data-off="warning" name="SelectedProduct" type="checkbox" value="@product.ID" data-on-text="是"  data-off-text="否"
                                                                           @if (Model.Products != null) { var supplierProduct = new HashSet<int>(Model.Products.Select(c => c.ID));  @(Html.Raw(supplierProduct.Contains(product.ID) ? "checked=\"checked\"" : ""))            } />

                                                                </div>
                                                            </div>
                                                        </p>
                                                        
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                    
                                    
                                </div>     
                                
                            </div>
                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
    </div>

    <div class="modal-footer">
        <button type="submit" id="submitbutton" class="btn blue btn-sm default"><i class="fa fa-check"></i> 提交</button>
        <button type="button" class="btn btn-sm default" id="cancel" data-dismiss="modal">撤销</button>
    </div>

}
                                              

<script>
    var FormComponents = function () {
        var handleCheckForm = function () {
            var form = $("#mainForm");
            var error = $('.alert-danger', form);
            var success = $('.alert-success', form);

            form.validate({
                errorElement: 'span', //default input error message container
                errorClass: 'help-block help-block-error', // default input error message class
                focusInvalid: false, // do not focus the last invalid input
                ignore: "",  // validate all fields including form hidden input
                rules: {
                    Name: {
                        minlength: 2,
                        required: true,
                    },
                    AvailableFrom: {
                        required: true,
                    },
                    AvailableTo: {
                        required: true,
                    },
                    Sku: {
                        minlength: 8,
                        maxlength:9,
                        required: true,
                        cache: false,
                        remote:"AjaxCheckForm"+ encodeURIComponent($("#Sku").val()),
                    },
                    PackingSize_Length: {
                        required: true,
                    },
                    packingwidth: {
                        required: true,
                    },
                    packingheight: {
                        required: true,
                    }


                },
                //messages: { // custom messages for radio buttons and checkboxes
                //    Sku: {
                //        required: "Please select a Membership type"
                //    },
                //},
                invalidHandler: function (event, validator) { //display error alert on form submit
                    success.hide();
                    error.show();
                    Metronic.scrollTo(error, -200);

                },

                errorPlacement: function (error, element) { // render error placement for each input type
                    var icon = $(element).parent('.input-icon').children('i');
                    icon.removeClass('fa-check').addClass("fa-warning");
                    icon.attr("data-original-title", error.text()).tooltip({ 'container': 'body' });
                },

                highlight: function (element) { // hightlight error inputs
                    $(element)
                        .closest('.form-group').removeClass("has-success").addClass('has-error'); // set error class to the control group
                },

                unhighlight: function (element) { // revert the change done by hightlight

                },

                success: function (label, element) {
                    var icon = $(element).parent('.input-icon').children('i');
                    $(element).closest('.form-group').removeClass('has-error').addClass('has-success'); // set success class to the control group
                    icon.removeClass("fa-warning").addClass("fa-check");
                },

                submitHandler: function (form) {
                    success.show();
                    error.hide();
                    //form[0].submit(alert('dasdas')); // submit the form
                }
            });


            $("#submitbutton").click(function (e) {
                if (!form.valid()) {
                    e.preventDefault();
                }

            });
        };

        return {
            init: function () { 
                handleCheckForm();
            }
        }


    }();

    var FormFileUpload = function () {
        // Handles Image Preview using jQuery Fancybox plugin
        var handleFancybox = function () {
            if (!$(document).delegate.fancybox) {
                return;
            }

            if ($(document).delegate(".fancybox-button").size() > 0) {
                $(document).delegate(".fancybox-button").fancybox({
                    groupAttr: 'data-rel',
                    prevEffect: 'none',
                    nextEffect: 'none',
                    closeBtn: true,
                    helpers: {
                        title: {
                            type: 'inside'
                        }
                    }
                });
            }
        };


        return {

            //main function to initiate the module
            init: function () {
                handleFancybox();

                $('#fileupload').find('thead').hide();
                // Initialize the jQuery File Upload widget:
                $('#fileupload').fileupload({
                    disableImageResize: false,
                    url: "@Url.StaticFile()/UploadHandler.ashx",//
                    autoUpload: false,
                    disableImageResize: /Android(?!.*Chrome)|Opera/.test(window.navigator.userAgent),
                    maxFileSize: 5000000,
                    acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
                    formData: { subfolder: 'ims' }
                    // Uncomment the following to send cross-domain cookies:
                    //xhrFields: {withCredentials: true},                
                }).bind('fileuploadsubmit', function (e, data) {                    
                    $('#fileupload').find('thead').show();
                });
                
                // Enable iframe cross-domain access via redirect option:
                $('#fileupload').fileupload(
                    'option',
                    'redirect',
                    window.location.href.replace(
                        /\/[^\/]*$/,
                        '/cors/result.html?%s'
                    )
                );

                // Upload server status check for browsers with CORS support:
                @*if ($.support.cors) {
                    $.ajax({
                        url: $('#fileupload').attr("action"),
                        type: 'HEAD'
                    }).fail(function () {
                        $('<div class="alert alert-danger"/>')
                            .text('Upload server currently unavailable - ' +
                                    new Date())
                            .appendTo('#fileupload');
                    });
                }*@

                // Load & display existing files:
                $('#fileupload').addClass('fileupload-processing');
               $.ajax({
                    // Uncomment the following to send cross-domain cookies:
                    //xhrFields: {withCredentials: true},
                    url: '@Url.StaticFile()/UploadHandler.ashx?productid=@Model.ID',//"@Url.StaticFile()/UploadHandler.ashx",//
                    dataType: 'json',
                    context: $('#fileupload')[0]
                }).always(function () {
                    $(this).removeClass('fileupload-processing');
                   // $('#fileupload').find('thead').show();
                }).done(function (result) {
                    var i = result.files;
                    if (typeof (result.files.length) != 'undefined')
                    {
                        $('#fileupload').find('thead').show();
                    }
                    $(this).fileupload('option', 'done')
                    .call(this, $.Event('done'), { result: result });
                });

                //更改部分
                var fileUploadButtonBar = $('#fileupload').find('.fileupload-buttonbar');
                fileUploadButtonBar.find('.delete').click(function () {
                    $('#fileupload').find('thead').hide();
                });

                $('.files').delegate(".btndelete", "click", function () {
                   
                    if ($('.files').find('.btndelete').length == 1) {
                        $('#fileupload').find('thead').hide()
                    }
                });


            }

        };

    }();

    var ProductsEditComponents = function () {    

      

        var handleReviews = function () {

            var grid = new Datatable();

            grid.init({
                src: $("#datatable_reviews"),
                onSuccess: function (grid) {
                    // execute some code after table records loaded
                },
                onError: function (grid) {
                    // execute some code on network or other general error  
                },
                loadingMessage: 'Loading...',
                dataTable: { // here you can define a typical datatable settings from http://datatables.net/usage/options 

                    // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
                    // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/scripts/datatable.js). 
                    // So when dropdowns used the scrollable div should be removed. 
                    //"dom": "<'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'<'table-group-actions pull-right'>>r>t<'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'>>",

                    "lengthMenu": [
                        [10, 20, 50, 100, 150, -1],
                        [10, 20, 50, 100, 150, "All"] // change per page values here
                    ],
                    "pageLength": 10, // default record count per page
                    "ajax": {
                       // "url": "demo/ecommerce_product_reviews.php", // ajax source
                    },
                    "columnDefs": [{ // define columns sorting options(by default all columns are sortable extept the first checkbox column)
                        'orderable': true,
                        'targets': [0]
                    }],
                    "order": [
                        [0, "asc"]
                    ] // set first column as a default sort by asc
                }
            });
        }

        var handleHistory = function () {

            var grid = new Datatable();

            grid.init({
                src: $("#datatable_history"),
                onSuccess: function (grid) {
                    // execute some code after table records loaded
                },
                onError: function (grid) {
                    // execute some code on network or other general error  
                },
                loadingMessage: 'Loading...',
                dataTable: { // here you can define a typical datatable settings from http://datatables.net/usage/options 
                    "lengthMenu": [
                        [10, 20, 50, 100, 150, -1],
                        [10, 20, 50, 100, 150, "All"] // change per page values here
                    ],
                    "pageLength": 10, // default record count per page
                    "ajax": {
                       // "url": "demo/ecommerce_product_history.php", // ajax source
                    },
                    "columnDefs": [{ // define columns sorting options(by default all columns are sortable extept the first checkbox column)
                        'orderable': true,
                        'targets': [0]
                    }],
                    "order": [
                        [0, "asc"]
                    ] // set first column as a default sort by asc
                }
            });
        }

        var initComponents = function () {
            //init datepickers
            $('.date-picker').datepicker({
                rtl: Metronic.isRTL(),
                language: 'zh-CN',
                autoclose: true
            });

            //init datetimepickers
            $(".datetime-picker").datetimepicker({
                isRTL: Metronic.isRTL(),
                autoclose: true,
                language: 'zh-CN',
                todayBtn: true,
                pickerPosition: (Metronic.isRTL() ? "bottom-right" : "bottom-left"),
                minuteStep: 10
            });

            //init maxlength handler
            $('.maxlength-handler').maxlength({
                limitReachedClass: "label label-danger",
                alwaysShow: true,
                threshold: 5
            });
        }

        var handleSpinners = function () {
            $('.spinner').spinner();
            $('#spinner1').spinner();
            $('#spinner2').spinner({ disabled: true });
            $('#spinner3').spinner({ value: 0, min: 0, max: 10 });
            $('#spinner4').spinner({ value: 0, step: 5, min: 0, max: 200 });
        }

        return {
            //main function to initiate the module
            init: function () {
                initComponents();
                handleSpinners();              
                //handleReviews();
               // handleHistory();
            }
        };
    }();

    $(function () {       
        Metronic.init();        
        //ProductsEditComponents.init();
        //FormFileUpload.init();
        //FormComponents.init();
        

    });
</script>




