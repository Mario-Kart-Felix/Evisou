@using Evious.Framework.Contract
@using Evious.Framework.Web.Controls
@using Evious.Account.Contract
@model Role

<div class="modal-header">

    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    @{
        if (Model.ID == 0)
        {
            <h4 class="modal-title" id="ModalLabel">添加新角色</h4>
        }
        else
        {
            <h4 class="modal-title" id="ModalLabel">编辑角色资料</h4>
        }
    }
</div>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "mainForm" }))
{
    @Html.ValidationSummary(true)
    <div class="modal-body">
        <div class="form-horizontal">           
            <div class="form-group">
                <label class="control-label col-md-2"><span class="required">*</span>角色名：</label>
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-addon">
                            <i class="fa fa-users"></i>
                        </span>
                        <div class="input-icon right">
                            <i class="fa"></i>
                            @Html.TextBoxFor(m => m.Name, new { @class = "form-control text-box single-line input-medium" })
                        </div>
                    </div>
                    <span class="help-inline">@Html.ValidationMessageFor(m => m.Name)</span>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">描述：</label>
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-addon">
                            <i class="fa  fa-pencil-square-o"></i>
                        </span>
                        <div class="input-icon right">
                            <i class="fa"></i>
                            @Html.TextAreaFor(m => m.Info, new { @class = "form-control text-box single-line input-medium", @rows = "3" })
                        </div>
                    </div>
                    <span class="help-inline">@Html.ValidationMessageFor(m => m.Info)</span>
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">权限：</label>
                <div class="col-md-10">
                    @Html.CheckBoxList("BusinessPermissionList", true)
                </div>
            </div>
           
        </div>
    </div>
    <div class="modal-footer">
        <button type="submit" id="submitbutton" class="btn blue btn-sm default"><i class="fa fa-check"></i> 提交</button>
        <button type="button" class="btn btn-sm default" id="cancel" data-dismiss="modal">撤销</button>
    </div>

}


<script>
    $(function () {        
        var form = $("#mainForm");        
        var error = $('.alert-danger', form);
        var success = $('.alert-success', form);
        form.validate({
            errorElement: 'span', //default input error message container
            errorClass: 'help-block help-block-error', // default input error message class
            focusInvalid: false, // do not focus the last invalid input
            ignore: "",  // validate all fields including form hidden input
            rules: {
                Name: {
                    minlength: 2,
                    required: true,
                },                
            },

            invalidHandler: function (event, validator) { //display error alert on form submit
                success.hide();
                error.show();
                Metronic.scrollTo(error, -200);

            },

            errorPlacement: function (error, element) { // render error placement for each input type
                var icon = $(element).parent('.input-icon').children('i');
                icon.removeClass('fa-check').addClass("fa-warning");
                icon.attr("data-original-title", error.text()).tooltip({ 'container': 'body' });
            },

            highlight: function (element) { // hightlight error inputs
                $(element)
                    .closest('.form-group').removeClass("has-success").addClass('has-error'); // set error class to the control group
            },

            unhighlight: function (element) { // revert the change done by hightlight

            },

            success: function (label, element) {
                var icon = $(element).parent('.input-icon').children('i');
                $(element).closest('.form-group').removeClass('has-error').addClass('has-success'); // set success class to the control group
                icon.removeClass("fa-warning").addClass("fa-check");
            },

            submitHandler: function (form) {
                success.show();
                error.hide();
                //form[0].submit(alert('dasdas')); // submit the form
            }
        });


        $("#submitbutton").click(function (e) {
            if (!form.valid()) {
                e.preventDefault();
            }
        });

    });
</script>

